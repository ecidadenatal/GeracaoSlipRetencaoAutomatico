<?xml version="1.0" encoding="ISO-8859-1"?>
<modification>
  <name>Geracao de Slip de Retencoes Automaticos</name>
  <id>GeracaoSlipRetencaoAutomatico</id>
  <ecidade-version>2.3.46</ecidade-version>

  <file path='forms/db_frmmanutencaoagenda.php'>
    <operation>
      <search regex="true"><![CDATA[(id\s*=\s*(?:'|")atualizar(?:'|").*)onclick\s*=\s*(?:'|")(.*)(?:'|")]]></search>
      <add><![CDATA[$1 onclick='js_verificaLancamentoRetencoes()']]></add>
    </operation>

    <operation>
      <search regex="true"><![CDATA[(<\/table>.*\s*?\n?\s*?.*<\/form>)]]></search>
      <add>
        <![CDATA[</table>
    <input type="hidden" name="dadosMovimentosRetencoesSlip" id="dadosMovimentosRetencoesSlip" size=40>
</form>
          ]]>
      </add>
    </operation>

    <operation>
      <search regex="true"><![CDATA[function(\s*)js_configurar(\s*)\((.*)\)(\s*){(\n*.*\n*)var(\s*)aMovimentos(\s*)=(\s*)gridNotas.getSelection\(\);]]></search>
      <add>
        <![CDATA[
  /* 
   * plugin GeracaoSlipRetencaoAutomatico 
   */        
  function js_verificaLancamentoRetencoes() {

      var aMovimentos = gridNotas.getSelection();
      var aMovimentosRetencoes =  new Array();

      if (aMovimentos.length == 0) {

          alert('Não há nenhum movimento selecionado.');
          return false;

      }

      if ($F('e42_dtpagamento') == "") {

        alert('Data de pagamento nao informado.');
        return false;

      }
      if (js_comparadata(sDataDia,$F('e42_dtpagamento'),">")) {

        alert("Data Informada Inválida.\nData menor que a data do sistema");
        return false;

      }

      for (var iMov = 0; iMov < aMovimentos.length; iMov++) {

          oMovimento                   = new Object();
          oMovimento.iCodForma         = aMovimentos[iMov][9];
          oMovimento.iCodMov           = aMovimentos[iMov][0];
          oMovimento.nValor            = (new Number(aMovimentos[iMov][14])).valueOf();
          oMovimento.iContaFornecedor  = aMovimentos[iMov][8];
          oMovimento.iContaPagadora    = aMovimentos[iMov][6];
          oMovimento.iContaSaltes      = js_getContaSaltes( $('ctapag'+aMovimentos[iMov][0]) );
          oMovimento.iCodNota          = aMovimentos[iMov][5];
          oMovimento.nValorRetencao    = (js_strToFloat(aMovimentos[iMov][13])).valueOf();
          
          if (oMovimento.nValorRetencao > 0 && (oMovimento.iCodForma == 3 || oMovimento.iCodForma == 4)) {
            aMovimentosRetencoes.push(oMovimento);
          }
              
      }
      
      if (aMovimentosRetencoes.length == 0) {

          js_configurar();
          
      } else {    
          
        oParam                     = new Object();
        oParam.MovimentosRetencoes = aMovimentosRetencoes;
        oMovimentosRetencoes = Object.toJSON(oParam);
        js_configuraContasSlipRetencoes(oMovimentosRetencoes);
        
      }   

  }

  function js_configuraContasSlipRetencoes(oMovimentosRetencoes){

       js_OpenJanelaIframe('top.corpo', 'db_iframe_slipretencao','emp4_configuraContaPagadoraRetencoesSlip001.php?json='+oMovimentosRetencoes,
                  'Configurar Conta Pagadora Para Geração dos Slips De Retenções',
                  false,
                  32,
                  18,
                  document.body.clientWidth - 32,
                  document.body.clientHeight - 20);

  }
  
  function js_emiteSlipGerados() {

	  var sVirgula = "";
	  var sListaMovimentos = "";
	  var aDadosRetencoes = new Array();
	  	
	  aDadosRetencoes = JSON.parse($F('dadosMovimentosRetencoesSlip'));
	  for (iInd = 0; iInd < aDadosRetencoes.length; iInd++) {

	 	sListaMovimentos += sVirgula+aDadosRetencoes[iInd].iCodMov; 
	 	sVirgula = ",";
	  }
	   
      window.open('cai2_retencaoreceitaslip002.php?sMovimentos='+sListaMovimentos,'','width='+(screen.availWidth-5)+',height='+(screen.availHeight-40)+',scrollbars=1,location=0');
	  return true;
  }
  
  /* 
   * plugin GeracaoSlipRetencaoAutomatico  
   */
       
  function js_configurar ( $3 ) {
  
    var aMovimentos = gridNotas.getSelection(); 

    /* plugin GeracaoSlipRetencaoAutomatico */      
      var aDadosRetencoes = new Array();
      if ($F('dadosMovimentosRetencoesSlip') != "") {
        aDadosRetencoes = JSON.parse($F('dadosMovimentosRetencoesSlip'));
      }
    /* plugin GeracaoSlipRetencaoAutomatico */       
          ]]>
      </add>
    </operation>      
    
    <operation>
      <search regex="true"><![CDATA[oEnvio(.*).aMovimentos.push\(\s*oMovimento\s*\);]]></search>
      <add>
        <![CDATA[
      /* plugin GeracaoSlipRetencaoAutomatico */        
       oMovimento.aRetencoes  = new Array();
       for (iInd = 0; iInd < aDadosRetencoes.length; iInd++) {

         if (aDadosRetencoes[iInd].iCodMov == iCodMov) {
           oMovimento.aRetencoes = aDadosRetencoes[iInd].aRetencoes; 
         }   
         
       }
      /* plugin GeracaoSlipRetencaoAutomatico */
       
       oEnvio$1.aMovimentos.push(oMovimento);
       ]]>
      </add>
    </operation> 
    
    <operation>
      <search regex="true"><![CDATA[\}\n*.*\n*.*\}\s*else\s*\{\n*.*alert\s*\(\s*oRetorno.message.urlDecode\(\)\s*\);]]></search>
      <add>
        <![CDATA[}
      /* plugin GeracaoSlipRetencaoAutomatico */
       js_emiteSlipGerados();
       $("dadosMovimentosRetencoesSlip").value = "";
      /* plugin GeracaoSlipRetencaoAutomatico */
     } else {
       alert(oRetorno.message.urlDecode()); 
        ]]>
      </add>
    </operation>
  </file>
  
  <file path='emp1_retencaotiporec001.php'>
    <operation>
      <search regex="true"><![CDATA[\}\n\s*db_fim_transacao\((\s*)\$lSqlErro(\s*)\)(\s*);]]></search>
      <add>
        <![CDATA[
    /* plugin GeracaoSlipRetencaoAutomatica */
    $oDaoPluginRetencaoTipoRecGeraSlip = db_utils::getDao("retencaotiporecgeraslip");
    $oDaoPluginRetencaoTipoRecGeraSlip->retencaotiporec = $clretencaotiporec->e21_sequencial;
    $oDaoPluginRetencaoTipoRecGeraSlip->geraslip        = $geraslip;
    $oDaoPluginRetencaoTipoRecGeraSlip->incluir(null);
    if ( $oDaoPluginRetencaoTipoRecGeraSlip->erro_status == '0') {
        
        $lSqlErro = true;
        $clretencaotiporec->erro_msg    = $oDaoPluginRetencaoTipoRecGeraSlip->erro_msg;
        $clretencaotiporec->erro_status = 0;
        
      }
    /* plugin GeracaoSlipRetencaoAutomatica */
        
  }
  db_fim_transacao($lSqlErro);
        ]]>
      </add>
    </operation>
  </file>
  
  <file path='emp1_retencaotiporec002.php'>
    <operation>
      <search regex="true"><![CDATA[new(\s*)cl_retencaotiporeccgm\(\);(\s*\n*)]]></search>
      <add>
        <![CDATA[new cl_retencaotiporeccgm();
        /* plugin GeracaoSlipRetencaoAutomatica */
          $oDaoPluginRetencaoTipoRecGeraSlip = db_utils::getDao("retencaotiporecgeraslip");
        /* plugin GeracaoSlipRetencaoAutomatica */ 
        ]]>
      </add>
    </operation>
    
    <operation>
      <search regex="true"><![CDATA[db_fim_transacao\((\s*)\$lSqlErro(\s*)\)(\s*);]]></search>
      <add>
        <![CDATA[
    /* plugin GeracaoSlipRetencaoAutomatica */         
    $oDaoPluginRetencaoTipoRecGeraSlip->excluir(null, "retencaotiporec = {$e21_sequencial}");
    
    $oDaoPluginRetencaoTipoRecGeraSlip->retencaotiporec = $e21_sequencial;
    $oDaoPluginRetencaoTipoRecGeraSlip->geraslip        = $geraslip;
    $oDaoPluginRetencaoTipoRecGeraSlip->incluir(null);
    if ( $oDaoPluginRetencaoTipoRecGeraSlip->erro_status == '0') {
        
        $lSqlErro = true;
        $clretencaotiporec->erro_msg    = $oDaoPluginRetencaoTipoRecGeraSlip->erro_msg;
        $clretencaotiporec->erro_status = 0;
        
    }
    /* plugin GeracaoSlipRetencaoAutomatica */
     
    db_fim_transacao($lSqlErro); 
        ]]>
      </add>
    </operation>

    <operation>
      <search regex="true"><![CDATA[\$clretencaotiporec->sql_query_irrf\((.*)\);(\s*\n*)(.*\n*)db_fieldsmemory\(\$result,0\);]]></search>
      <add>
        <![CDATA[
   $clretencaotiporec->sql_query_irrf($1);$3
   db_fieldsmemory($result,0);
   
   /* plugin GeracaoSlipRetencaoAutomatica */        
   $sSqlRetencaoTipoRecGeraSlip = $oDaoPluginRetencaoTipoRecGeraSlip->sql_query_file("","*","","retencaotiporec = {$e21_sequencial}");
   $rsPluginRetencaoTipoRecGeraSlip = $oDaoPluginRetencaoTipoRecGeraSlip->sql_record($sSqlRetencaoTipoRecGeraSlip);
   db_fieldsmemory($rsPluginRetencaoTipoRecGeraSlip,0);
    /* plugin GeracaoSlipRetencaoAutomatica */
        ]]>
      </add>
    </operation>          
  </file>
  
  <file path='emp1_retencaotiporec003.php'>
    <operation>
      <search regex="true"><![CDATA[new(\s*)cl_retencaotiporeccgm\(\);(\s*\n*)]]></search>
      <add>
        <![CDATA[new cl_retencaotiporeccgm();
        /* plugin GeracaoSlipRetencaoAutomatica */
          $oDaoPluginRetencaoTipoRecGeraSlip = db_utils::getDao("retencaotiporecgeraslip");
        /* plugin GeracaoSlipRetencaoAutomatica */ 
        ]]>
      </add>
    </operation>  

    <operation>
      <search regex="true"><![CDATA[db_fim_transacao\((.*)\);]]></search>
      <add>
        <![CDATA[
    /* plugin GeracaoSlipRetencaoAutomatica */    
    $oDaoPluginRetencaoTipoRecGeraSlip->excluir(null, "retencaotiporec = {$e21_sequencial}");
    if ( $oDaoPluginRetencaoTipoRecGeraSlip->erro_status == '0') {
        
        $lSqlErro = true;
        $clretencaotiporec->erro_msg    = $oDaoPluginRetencaoTipoRecGeraSlip->erro_msg;
        $clretencaotiporec->erro_status = 0;
        
    }
    /* plugin GeracaoSlipRetencaoAutomatica */
    
    db_fim_transacao($1); 
        ]]>
      </add>
    </operation>

    <operation>
      <search regex="true"><![CDATA[\$clretencaotiporec->sql_query_irrf\((.*)\);(\s*\n*)(.*\n*)db_fieldsmemory\(\$result,0\);]]></search>
      <add>
        <![CDATA[
   $clretencaotiporec->sql_query_irrf($1);$3
   db_fieldsmemory($result,0);
   
   /* plugin GeracaoSlipRetencaoAutomatica */        
   $sSqlRetencaoTipoRecGeraSlip = $oDaoPluginRetencaoTipoRecGeraSlip->sql_query_file("","*","","retencaotiporec = {$e21_sequencial}");
   $rsPluginRetencaoTipoRecGeraSlip = $oDaoPluginRetencaoTipoRecGeraSlip->sql_record($sSqlRetencaoTipoRecGeraSlip);
   db_fieldsmemory($rsPluginRetencaoTipoRecGeraSlip,0);
    /* plugin GeracaoSlipRetencaoAutomatica */
        ]]>
      </add>
    </operation>      
  </file>     
  
  <file path='forms/db_frmretencaotiporec.php'>
    <operation>
      <search regex="true"><![CDATA[(<\/table>.*\s*?\n?\s*?.*<\/fieldset>)]]></search>
      <add>
        <![CDATA[
            <tr>
              <td nowrap title="Gera Slips Automaticamente?">
                 <b> Gerar Slips Automaticamente:</b>
              </td>
              <td> 
                 <?
                 $x = array("t"=>"Sim", "f"=>"Não");
                 db_select("geraslip",$x,true,$db_opcao,"style='width: 95px;'");
                 ?>
              </td>
            </tr>
         </table>
      </fieldset>  
        ]]>
      </add>
    </operation>  
  </file>      
    
  <file path='emp4_manutencaoPagamentoRPC.php'>
    <operation>
      <search regex="true" flag="U"><![CDATA[(if\s*\(\$iCodForma\s*==\s*3\)\s*{)((\n*.*)*}\n*.*}\n*.*})(\n*.*})]]></search>
      <add>
      <![CDATA[$1 $2 $3
        /* 
         * plugin GeracaoSlipRetencaoAutomatica 
         */
           $oDaoEmpAgeMovConta = db_utils::getDao("empagemovconta");
           $oDaoRetencaoReceitas = db_utils::getDao("retencaoreceitas");
           foreach ($oMovimento->aRetencoes as $oRetencoes) {
             
             $sCamposRetencaoReceitas = "retencaoreceitas.e23_sequencial as retencao,
                                         retencaopagordem.e20_pagordem as pagordem,
                                         pagordemnota.e71_codnota as empnota,
                                         (select retencaotiporeccgm.e48_cgm 
                                            from retencaotiporeccgm
                                           where retencaotiporeccgm.e48_retencaotiporec = retencaotiporec.e21_sequencial) as numcgm,
                                         (select o58_codigo
                                            from orcdotacao
                                           inner join empempenho on e60_coddot = o58_coddot
                                                                and e60_anousu = o58_anousu
                                                                and e60_instit = o58_instit
                                           where e60_numemp = e50_numemp) as recurso,
                                         retencaoreceitas.e23_valorretencao as valor,
                                         (select geraslip 
                                            from plugins.retencaotiporecgeraslip 
                                           where retencaotiporecgeraslip.retencaotiporec = retencaotiporec.e21_sequencial) as geraslip,
                                         {$oRetencoes->iContaPagadora} as conta_credito,
                                         (select tabplan.k02_reduz
                                            from tabplan 
                                           where tabplan.k02_codigo = retencaotiporec.e21_receita
                                             and tabplan.k02_anousu = extract(year from retencaopagordem.e20_data)
                                           union   
                                         select conplanoreduz.c61_reduz  
                                                from taborc 
                                                     inner join orcreceita                on taborc.k02_codrec = orcreceita.o70_codrec 
                                                                                         and taborc.k02_anousu = orcreceita.o70_anousu 
                                                     inner join orcfontes                 on orcfontes.o57_codfon = orcreceita.o70_codfon 
                                                                                         and orcfontes.o57_anousu = orcreceita.o70_anousu 
                                                     inner join conplanoconplanoorcamento on conplanoconplanoorcamento.c72_conplanoorcamento = orcfontes.o57_codfon 
                                                                                         and conplanoconplanoorcamento.c72_anousu = orcfontes.o57_anousu 
                                                     inner join conplanoreduz             on conplanoreduz.c61_codcon = conplanoconplanoorcamento.c72_conplano 
                                                                                         and conplanoreduz.c61_anousu = conplanoconplanoorcamento.c72_anousu 
                                                                                         and conplanoreduz.c61_instit = retencaotiporec.e21_instit 
                                               where taborc.k02_codigo = retencaotiporec.e21_receita
                                                 and taborc.k02_anousu = extract(year from retencaopagordem.e20_data)) as conta_debito";
             $sSqlRetencaoReceitas = $oDaoRetencaoReceitas->sql_query_consulta(null, $sCamposRetencaoReceitas, null, "e23_sequencial = {$oRetencoes->iRetencao} and e27_principal is true");
             $rsDadosRetencaoReceitas = $oDaoRetencaoReceitas->sql_record($sSqlRetencaoReceitas);
             $oDadosRetencoes = db_utils::fieldsMemory($rsDadosRetencaoReceitas, 0);
             $oDadosRetencoes->sHistorico = "";
             
             if (!in_array($oMovimento->iCodMov,$aMovimentosProcessados)) {
                
               /* confirmamos o pagamento das retenções */
               $oRetencaoNota = new retencaoNota($oDadosRetencoes->empnota);
               $oRetencaoNota->setINotaLiquidacao($oDadosRetencoes->pagordem);
               $oRetencaoNota->setCodigoMovimento($oMovimento->iCodMov);
               $oRetencaoNota->configurarPagamentoRetencoes();
               
               $iCodNovoMovimento = $oRetencaoNota->getCodigoNovoMovimento();
               
               $oDaoEmpAgeMovConta->sql_record($oDaoEmpAgeMovConta->sql_query_file($iCodNovoMovimento));
               if ($oDaoEmpAgeMovConta->numrows == 0) {
               	$oDaoEmpAgeMovConta->e98_codmov = $iCodNovoMovimento;
               	$oDaoEmpAgeMovConta->e98_contabanco = $oMovimento->iContaFornecedor;
               	$oDaoEmpAgeMovConta->incluir($iCodNovoMovimento);
               	if ($oDaoEmpAgeMovConta->erro_status == 0) {
               		throw new Exception("ERRO [1] - Vinculando conta ao movimento do empenho - " .$oDaoEmpAgeMovConta->erro_msg );
               	}
               }
                
               $oDaoEmpAgeMovTipoTransmissao->excluir (null, "e25_empagemov = {$iCodNovoMovimento}");
               if ($oDaoEmpAgeMovTipoTransmissao->erro_status == 0) {
                throw new Exception("ERRO [0] - Vinculando Movimento Tipo Transmissao - " .$oDaoEmpAgeMovTipoTransmissao->erro_msg );
               }
               
               $oDaoEmpAgeMovTipoTransmissao->e25_empagemov             = $iCodNovoMovimento;
               $oDaoEmpAgeMovTipoTransmissao->e25_empagetipotransmissao = ParametroCaixa::getTipoTransmissaoPadrao();
               $oDaoEmpAgeMovTipoTransmissao->incluir(null);
               if ($oDaoEmpAgeMovTipoTransmissao->erro_status == 0) {
                throw new Exception("ERRO [1] - Vinculando Movimento Tipo Transmissao - " .$oDaoEmpAgeMovTipoTransmissao->erro_msg );
               }
               
               /* realizamos o pagamento dos movimentos das retencoes */
               $oOrdemPagamento = new ordemPagamento($oDadosRetencoes->pagordem);
               $oOrdemPagamento->setCheque(null);
               $oOrdemPagamento->setChequeAgenda(null);
               $oOrdemPagamento->setConta($oMovimento->iContaSaltes);
               $oOrdemPagamento->setValorPago("0");
               $oOrdemPagamento->setMovimentoAgenda($oMovimento->iCodMov);
               $oOrdemPagamento->setHistorico($oDadosRetencoes->sHistorico);
               $oOrdemPagamento->pagarOrdem();
               
               $aMovimentosProcessados[] = $oMovimento->iCodMov;
               
             }
                
             if ($oDadosRetencoes->geraslip == "t") {
             
                /* Geramos os slips das retenções */
                $oDaoOPAuxiliar  = db_utils::getDao("empageordem");
                $oDaoOPAuxiliar->e42_dtpagamento = date("Y-m-d",db_getsession("DB_datausu"));
                $iCodigoOrdemAuxiliarRetencoes = $oDaoOPAuxiliar->incluir(null);
                
                $oDaoRetencaoCorGrupoCorrente = db_utils::getDao("retencaocorgrupocorrente");
                $sSqlBuscaNumpreRetencao  = $oDaoRetencaoCorGrupoCorrente->sql_query_numpre(null,"k12_numpre",null," e23_sequencial = {$oDadosRetencoes->retencao} ");
                $rsBuscaNumpreRetencao    = $oDaoRetencaoCorGrupoCorrente->sql_record($sSqlBuscaNumpreRetencao);
                $oDadosRetencoes->iNumpre = db_utils::fieldsMemory($rsBuscaNumpreRetencao,0)->k12_numpre;
                
                $oSlip = new slip();
                $oSlip->addRecurso($oDadosRetencoes->recurso, $oDadosRetencoes->valor);
                $oSlip->setContaCredito($oDadosRetencoes->conta_credito);
                $oSlip->setCaracteristicaPeculiarCredito("000");
                $oSlip->setContaDebito($oDadosRetencoes->conta_debito);
                $oSlip->setCaracteristicaPeculiarDebito("000");
                $oSlip->setValor($oDadosRetencoes->valor);
                $oSlip->setTipoPagamento(2);
                $oSlip->setSituacao(1);
                $oSlip->addArrecadacao($oDadosRetencoes->iNumpre);
                $oSlip->setHistorico(9017);
                $oSlip->setNumCgm($oDadosRetencoes->numcgm);
                $sObservacao  = "Referente ao pagamento das retenções geradas para o recurso {$oDadosRetencoes->recurso}";
                $sObservacao .= ", cujo pagamento é ref. a OP {$oDadosRetencoes->pagordem}";
                $oSlip->setObservacoes($sObservacao);
                $oSlip->save();
                
                $iCodigoSlip = $oSlip->getSlip();
                $iCodigoMovimentoSlip = $oSlip->getMovimento();
                   
                $oDaoRetencaoReceitasSlip = db_utils::getDao("retencaoreceitaslip");
                $oDaoRetencaoReceitasSlip->slip = $iCodigoSlip;
                $oDaoRetencaoReceitasSlip->retencaoreceitas = $oDadosRetencoes->retencao;
                $oDaoRetencaoReceitasSlip->incluir(null);
                if ($oDaoRetencaoReceitasSlip->erro_status == "0") {
                  throw new Exception("ERRO [2] - Vinculando Slip e Retenção" .$oDaoRetencaoReceitasSlip->erro_msg );
                }
                   
                $oDaoNotaOrdem = db_utils::getDao("empagenotasordem");
                $oDaoNotaOrdem->e43_ordempagamento = $oDaoOPAuxiliar->e42_sequencial;
                $oDaoNotaOrdem->e43_empagemov      = $oSlip->getMovimento();
                $oDaoNotaOrdem->e43_autorizado     = "true";
                $oDaoNotaOrdem->e43_valor          = $oSlip->getValor();
                $oDaoNotaOrdem->incluir(null);
                 
                /**
                 * Vinculamos o slip gerado ao tipo Depósito de Diversos - Pagamento
                 */
                if (USE_PCASP) {
                   
                    $oDaoTipoOperacaoVinculo = db_utils::getDao('sliptipooperacaovinculo');
                    $oDaoTipoOperacaoVinculo->k153_slip             = $iCodigoSlip;
                    $oDaoTipoOperacaoVinculo->k153_slipoperacaotipo = 13;
                    $oDaoTipoOperacaoVinculo->incluir($iCodigoSlip);
                    if ($oDaoTipoOperacaoVinculo->erro_status == 0) {
                   
                        $sMensagemErro  = "Não foi possível víncular o tipo de slip ao slip.\n\n";
                        $sMensagemErro .= "Erro Técnico: {$oDaoTipoOperacaoVinculo->erro_msg}";
                        throw new Exception($sMensagemErro);
                    }
                }
                   
                /*
                 * Clonamos o objeto oMovimento e alteramos os dados necessários para configuração do movimento na agenda
                 * de acordo com a conta que foi selecionada na lookup
                 */
                /* 
                $oMovimentoSlip = clone($oMovimento);
                $oMovimentoSlip->iCodMov = $iCodigoMovimentoSlip;
                $oMovimentoSlip->iCodForma = 3;
                
                $oAgenda->configurarPagamentos($oParam->dtPagamento, $oMovimentoSlip, $iCodigoOrdemAuxiliarRetencoes, $oParam->lEmitirOrdeAuxiliar);
                $oDaoEmpAgeMovTipoTransmissao->e25_empagemov             = $oMovimentoSlip->iCodMov;
                $oDaoEmpAgeMovTipoTransmissao->e25_empagetipotransmissao = ParametroCaixa::getTipoTransmissaoPadrao();
                $oDaoEmpAgeMovTipoTransmissao->incluir(null);
                if ($oDaoEmpAgeMovTipoTransmissao->erro_status == 0) {
                    throw new Exception("ERRO [3] - Vinculando Movimento Tipo Transmissao - " .$oDaoEmpAgeMovTipoTransmissao->erro_msg );
                }*/
               
             }
              
           }
        /* 
         * plugin GeracaoSlipRetencaoAutomatica 
         */
        
        $4 
        ]]>
      </add>
    </operation>
  </file>
  
  <file path='model/agendaPagamento.model.php'>
    <operation>
      <search regex="true" limit="2"><![CDATA[(\$oDaoEmpAgeMov->e81_valor\s*=\s*\$oObjeto->nValor;)]]></search>
        <add>
          <![CDATA[$oDaoEmpAgeMov->e81_valor  = (float)"".$oObjeto->nValor."";]]></add>
    </operation>
  </file>  
  
  <file path='model/retencaoNota.model.php'>
    <operation>
      <search regex="true"><![CDATA[private\s*\$aRetencoes\s*=\s*array\(\)\s*;]]></search>
      <add>
        <![CDATA[
    private $aRetencoes = array();    
    
    /*
     * plugin GeracaoSlipRetencaoAutomatico
     */
    private $iCodigoNovoMovimento = null;
    
    function setCodigoNovoMovimento($iCodigoNovoMovimento) {
        $this->iCodigoNovoMovimento = $iCodigoNovoMovimento;
    }
    
    function getCodigoNovoMovimento() {
        return $this->iCodigoNovoMovimento;
    }
    /* 
     * plugin GeracaoSlipRetencaoAutomatico
     */
        ]]>
      </add>
    </operation>

    <operation>
      <search regex="true"><![CDATA[(\$iCodigoNovoMovimento\s*=\s*\$oAgendaPagamento->addMovimentoAgenda\(.*\)\;)]]></search>
        <add>
          <![CDATA[$1 
                   $this->setCodigoNovoMovimento($iCodigoNovoMovimento);]]></add>
    </operation>
  </file>  
  
  <file path='model/caixa/slip/Transferencia.model.php'>
    <operation>
      <search regex="true"><![CDATA[(\$oDaoExcluirSlip\s*=\s*new\s*cl_slip\(\);)]]></search>
        <add>
          <![CDATA[
    /* Plugin GeracaoSlipRetencaoAutomatica */
    $oRetencaoReceitaSlip = db_utils::getDao("retencaoreceitaslip");
    $rsRetencaoReceitaSlip = $oRetencaoReceitaSlip->sql_record($oRetencaoReceitaSlip->sql_query_file("", "sequencial", "", "slip = ".$this->getCodigoSlip()));
    if ($oRetencaoReceitaSlip->numrows > 0) {
    	
    	$oDaoSlipCorrente = db_utils::getDao("slipcorrente");
    	$oDaoSlipCorrente->excluir(null, "k112_slip = {$this->getCodigoSlip()}");
        if ($oDaoSlipCorrente->erro_status == "0") {
          throw new BusinessException($oDaoSlipCorrente->erro_msg);
        }
        
    	$oRetencaoReceitaSlip->excluir(null, "slip = {$this->getCodigoSlip()}");
    	if ($oRetencaoReceitaSlip->erro_status == "0") {
    		throw new BusinessException($oRetencaoReceitaSlip->erro_msg);
    	}
    }
    
    $oDaoExcluirSlip = new cl_sliprecurso();
    $oDaoExcluirSlip->excluir(null, "k29_slip = {$this->getCodigoSlip()}");
    if ($oDaoExcluirSlip->erro_status == "0") {
    	throw new BusinessException($oDaoExcluirSlip->erro_msg);
    }
    /* Plugin GeracaoSlipRetencaoAutomatica */
    
    $1]]></add>
    </operation>
  </file>   
  
  <file path='cai4_transferencia.RPC.php'>
    <operation>
      <search regex="true"><![CDATA[(\$oRetorno->iInstituicaoOrigem\s*=\s*\$oSlip->getInstituicao\(\);)]]></search>
        <add>
          <![CDATA[      
            /*Plugin GeracaoSlipRetencaoAutomatica */      
            //verificamos se o slip possui configuração na agenda
			$oRetorno->configuracao_agenda = 'false';
            
			$oDaoEmpAgeConf = db_utils::getDao("empageconf");
            $oDaoEmpAgeSlip = db_utils::getDao("empageslip");
            
            $rsEmpAgeSlip = $oDaoEmpAgeSlip->sql_record($oDaoEmpAgeSlip->sql_query_file(null, $oSlip->getCodigoSlip())); 
            $iMovimentoSlip = db_utils::fieldsMemory($rsEmpAgeSlip, 0)->e89_codmov;
            
            $sSqlEmpAgeConf = $oDaoEmpAgeConf->sql_query_file($iMovimentoSlip);
            $rsEmpageConf   = $oDaoEmpAgeConf->sql_record($sSqlEmpAgeConf);
            if ($oDaoEmpAgeConf->numrows > 0) {
              $oRetorno->configuracao_agenda = 'true';
            }
            /*Plugin GeracaoSlipRetencaoAutomatica */
            
			$1]]></add>
    </operation>
  </file>   
  
  <file path='cai4_alteracaoslip001.php'>
    <operation>
      <search regex="true"><![CDATA[(\$\('ctnSlipPagamento'\).innerHTML = "";)]]></search>
        <add>
          <![CDATA[  
  /*Plugin GeracaoSlipRetencaoAutomatica */              
  if (<?php echo $oGet->db_opcao?> == "3" && oRetorno.configuracao_agenda == "true" ) {
	alert('Operação não permitida.\nSlip possui movimentos configurados na Agenda.');   
    return false;
  }
  /*Plugin GeracaoSlipRetencaoAutomatica */
  
  $1]]></add>
    </operation>
  </file>  
</modification>